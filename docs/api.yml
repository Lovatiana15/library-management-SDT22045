openapi: 3.0.3
info:
  title: Library API-STD22045
  version: 1.1.0
  description: STD22045
servers:
  - url: https://library.com
paths:
  /books:
    get:
      tags:
        - Books
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        #TODO3: add parameter to filter books by intervals of dates of the releaseDate
        - $ref: '#/components/parameters/releaseDateStart'
        - $ref: '#/components/parameters/releaseDateEnd'
      responses:
        200:
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    put:
      tags:
        - Books
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Book'
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /authors:
  #TODO2: complete GET (can be filtered by name) - PUT - DELETE
    get:
      tags:
        - Authors
      summary: Get all authors
      description: Retrieve a list of authors
      operationId: getAuthors
      parameters:
        - in: query
          name: authorName
          description: Filter author by name
          required: false
          schema:
            type: string
      responses:
       200:
        description: we get all of the list of the authors
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Author'  
    put:
      tags:
        - Authors
      summary: Create or update an author
      operationId: createOrUpdateAuthor
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
      responses:
        200:
          description: Author created or updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'  
  #TD2:fix: delete author one by one by Id
  /authors/{aId}: 
    delete:
      tags:
        - Authors
      summary: Delete an author by ID
      operationId: deleteAuthor
      parameters:
        - in: path
          name: authorId
          description: ID of the author to be deleted
          required: true
          schema:
            type: string
      responses:
        200:
          description: Author deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author' 


components:
  #TODO3: add parameter to filter books by intervals of dates of the releaseDate
    parameters:
      releaseDateStart:
        in: query
        name: releaseDateStart
        description: Filter books with a release date greater than or equal to this date
        required: false
        schema:
          type: string
          format: date

      releaseDateEnd:
        in: query
        name: releaseDateEnd
        description: Filter books with a release date less than or equal to this date
        required: false
        schema:
          type: string
          format: date
    schemas:
      #TD2: add new component crupdateBook
      CrupdateBook:
        type: object
        properties:
          id:
            type: string
          bookName:
            type: string
          pageNumbers:
            type: integer
          topic:
            type: string
            enum:
              - ROMANCE
              - COMEDY
              - OTHER
          releaseDate:
            type: string
            format: date
    #TD2: use of heritage to avoid code redundancy
      Book:
        allOf:
          - $ref: '#/components/schemas/CrupdateBook'
          - properties:
              Author:
                $ref: '#/components/schemas/Author'
      
      Author:
        type: object
        properties:
          id:
            type: string
          name:
            type: string
          sex:
            type: string
            enum:
              - M
              - F